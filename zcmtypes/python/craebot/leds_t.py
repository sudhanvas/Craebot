"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class leds_t(object):
    __slots__ = ["utime", "debris", "spot", "dock", "check", "power"]

    def __init__(self):
        self.utime = 0
        self.debris = False
        self.spot = False
        self.dock = False
        self.check = False
        self.power = ""

    def encode(self):
        buf = BytesIO()
        buf.write(leds_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qbbbb", self.utime, self.debris, self.spot, self.dock, self.check))
        buf.write(bytearray(self.power[:2]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != leds_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return leds_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = leds_t()
        self.utime = struct.unpack(">q", buf.read(8))[0]
        self.debris = bool(struct.unpack('b', buf.read(1))[0])
        self.spot = bool(struct.unpack('b', buf.read(1))[0])
        self.dock = bool(struct.unpack('b', buf.read(1))[0])
        self.check = bool(struct.unpack('b', buf.read(1))[0])
        self.power = buf.read(2)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if leds_t in parents: return 0
        tmphash = (0x8a7ae099135d4af6) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if leds_t._packed_fingerprint is None:
            leds_t._packed_fingerprint = struct.pack(">Q", leds_t._get_hash_recursive([]))
        return leds_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

