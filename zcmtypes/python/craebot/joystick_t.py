"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class joystick_t(object):
    __slots__ = ["utime", "nButtons", "nAxes", "buttons", "axes"]

    def __init__(self):
        self.utime = 0
        self.nButtons = 0
        self.nAxes = 0
        self.buttons = []
        self.axes = []

    def encode(self):
        buf = BytesIO()
        buf.write(joystick_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qbb", self.utime, self.nButtons, self.nAxes))
        buf.write(struct.pack('>%db' % self.nButtons, *self.buttons[:self.nButtons]))
        buf.write(struct.pack('>%df' % self.nAxes, *self.axes[:self.nAxes]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != joystick_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return joystick_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = joystick_t()
        self.utime, self.nButtons, self.nAxes = struct.unpack(">qbb", buf.read(10))
        self.buttons = map(bool, struct.unpack('>%db' % self.nButtons, buf.read(self.nButtons)))
        self.axes = struct.unpack('>%df' % self.nAxes, buf.read(self.nAxes * 4))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if joystick_t in parents: return 0
        tmphash = (0x2b109b683b9a08cc) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if joystick_t._packed_fingerprint is None:
            joystick_t._packed_fingerprint = struct.pack(">Q", joystick_t._get_hash_recursive([]))
        return joystick_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

