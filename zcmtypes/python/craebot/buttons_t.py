"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class buttons_t(object):
    __slots__ = ["utime", "clean", "day", "hour", "minute", "dock", "spot", "wheeldrop", "cliff"]

    def __init__(self):
        self.utime = 0
        self.clean = False
        self.day = False
        self.hour = False
        self.minute = False
        self.dock = False
        self.spot = False
        self.wheeldrop = False
        self.cliff = False

    def encode(self):
        buf = BytesIO()
        buf.write(buttons_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qbbbbbbbb", self.utime, self.clean, self.day, self.hour, self.minute, self.dock, self.spot, self.wheeldrop, self.cliff))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != buttons_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return buttons_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = buttons_t()
        self.utime = struct.unpack(">q", buf.read(8))[0]
        self.clean = bool(struct.unpack('b', buf.read(1))[0])
        self.day = bool(struct.unpack('b', buf.read(1))[0])
        self.hour = bool(struct.unpack('b', buf.read(1))[0])
        self.minute = bool(struct.unpack('b', buf.read(1))[0])
        self.dock = bool(struct.unpack('b', buf.read(1))[0])
        self.spot = bool(struct.unpack('b', buf.read(1))[0])
        self.wheeldrop = bool(struct.unpack('b', buf.read(1))[0])
        self.cliff = bool(struct.unpack('b', buf.read(1))[0])
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if buttons_t in parents: return 0
        tmphash = (0x2fd9e0742ca00fc3) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if buttons_t._packed_fingerprint is None:
            buttons_t._packed_fingerprint = struct.pack(">Q", buttons_t._get_hash_recursive([]))
        return buttons_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

