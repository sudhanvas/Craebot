/* ZCM type definition class file
 * This file was automatically generated by zcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package craebot;
 
import java.io.*;
import java.util.*;
import zcm.zcm.*;
 
public final class leds_t implements zcm.zcm.ZCMEncodable
{
    public long utime;
    public boolean debris;
    public boolean spot;
    public boolean dock;
    public boolean check;
    public byte power[];
 
    public leds_t()
    {
        power = new byte[2];
    }
 
    public static final long ZCM_FINGERPRINT;
    public static final long ZCM_FINGERPRINT_BASE = 0x8a7ae099135d4af6L;
 
    static {
        ZCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(craebot.leds_t.class))
            return 0L;
 
        classes.add(craebot.leds_t.class);
        long hash = ZCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(ZCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeByte( this.debris ? 1 : 0); 
 
        outs.writeByte( this.spot ? 1 : 0); 
 
        outs.writeByte( this.dock ? 1 : 0); 
 
        outs.writeByte( this.check ? 1 : 0); 
 
        outs.write(this.power, 0, 2);
 
    }
 
    public leds_t(byte[] data) throws IOException
    {
        this(new ZCMDataInputStream(data));
    }
 
    public leds_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != ZCM_FINGERPRINT)
            throw new IOException("ZCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static craebot.leds_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        craebot.leds_t o = new craebot.leds_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.debris = ins.readByte()!=0;
 
        this.spot = ins.readByte()!=0;
 
        this.dock = ins.readByte()!=0;
 
        this.check = ins.readByte()!=0;
 
        this.power = new byte[(int) 2];
        ins.readFully(this.power, 0, 2); 
    }
 
    public craebot.leds_t copy()
    {
        craebot.leds_t outobj = new craebot.leds_t();
        outobj.utime = this.utime;
 
        outobj.debris = this.debris;
 
        outobj.spot = this.spot;
 
        outobj.dock = this.dock;
 
        outobj.check = this.check;
 
        outobj.power = new byte[(int) 2];
        System.arraycopy(this.power, 0, outobj.power, 0, 2); 
        return outobj;
    }
 
}

