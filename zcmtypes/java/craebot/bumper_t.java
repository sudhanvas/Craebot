/* ZCM type definition class file
 * This file was automatically generated by zcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package craebot;
 
import java.io.*;
import java.util.*;
import zcm.zcm.*;
 
public final class bumper_t implements zcm.zcm.ZCMEncodable
{
    public long utime;
    public boolean is_left_pressed;
    public boolean is_right_pressed;
    public boolean is_light_left;
    public boolean is_light_front_left;
    public boolean is_light_center_left;
    public boolean is_light_center_right;
    public boolean is_light_front_right;
    public boolean is_light_right;
    public short light_signal_left;
    public short light_signal_front_left;
    public short light_signal_center_left;
    public short light_signal_center_right;
    public short light_signal_front_right;
    public short light_signal_right;
    public byte omni_ir;
 
    public bumper_t()
    {
    }
 
    public static final long ZCM_FINGERPRINT;
    public static final long ZCM_FINGERPRINT_BASE = 0x9aba7df6329379d0L;
 
    static {
        ZCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(craebot.bumper_t.class))
            return 0L;
 
        classes.add(craebot.bumper_t.class);
        long hash = ZCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(ZCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeByte( this.is_left_pressed ? 1 : 0); 
 
        outs.writeByte( this.is_right_pressed ? 1 : 0); 
 
        outs.writeByte( this.is_light_left ? 1 : 0); 
 
        outs.writeByte( this.is_light_front_left ? 1 : 0); 
 
        outs.writeByte( this.is_light_center_left ? 1 : 0); 
 
        outs.writeByte( this.is_light_center_right ? 1 : 0); 
 
        outs.writeByte( this.is_light_front_right ? 1 : 0); 
 
        outs.writeByte( this.is_light_right ? 1 : 0); 
 
        outs.writeShort(this.light_signal_left); 
 
        outs.writeShort(this.light_signal_front_left); 
 
        outs.writeShort(this.light_signal_center_left); 
 
        outs.writeShort(this.light_signal_center_right); 
 
        outs.writeShort(this.light_signal_front_right); 
 
        outs.writeShort(this.light_signal_right); 
 
        outs.writeByte(this.omni_ir); 
 
    }
 
    public bumper_t(byte[] data) throws IOException
    {
        this(new ZCMDataInputStream(data));
    }
 
    public bumper_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != ZCM_FINGERPRINT)
            throw new IOException("ZCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static craebot.bumper_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        craebot.bumper_t o = new craebot.bumper_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.is_left_pressed = ins.readByte()!=0;
 
        this.is_right_pressed = ins.readByte()!=0;
 
        this.is_light_left = ins.readByte()!=0;
 
        this.is_light_front_left = ins.readByte()!=0;
 
        this.is_light_center_left = ins.readByte()!=0;
 
        this.is_light_center_right = ins.readByte()!=0;
 
        this.is_light_front_right = ins.readByte()!=0;
 
        this.is_light_right = ins.readByte()!=0;
 
        this.light_signal_left = ins.readShort();
 
        this.light_signal_front_left = ins.readShort();
 
        this.light_signal_center_left = ins.readShort();
 
        this.light_signal_center_right = ins.readShort();
 
        this.light_signal_front_right = ins.readShort();
 
        this.light_signal_right = ins.readShort();
 
        this.omni_ir = ins.readByte();
 
    }
 
    public craebot.bumper_t copy()
    {
        craebot.bumper_t outobj = new craebot.bumper_t();
        outobj.utime = this.utime;
 
        outobj.is_left_pressed = this.is_left_pressed;
 
        outobj.is_right_pressed = this.is_right_pressed;
 
        outobj.is_light_left = this.is_light_left;
 
        outobj.is_light_front_left = this.is_light_front_left;
 
        outobj.is_light_center_left = this.is_light_center_left;
 
        outobj.is_light_center_right = this.is_light_center_right;
 
        outobj.is_light_front_right = this.is_light_front_right;
 
        outobj.is_light_right = this.is_light_right;
 
        outobj.light_signal_left = this.light_signal_left;
 
        outobj.light_signal_front_left = this.light_signal_front_left;
 
        outobj.light_signal_center_left = this.light_signal_center_left;
 
        outobj.light_signal_center_right = this.light_signal_center_right;
 
        outobj.light_signal_front_right = this.light_signal_front_right;
 
        outobj.light_signal_right = this.light_signal_right;
 
        outobj.omni_ir = this.omni_ir;
 
        return outobj;
    }
 
}

