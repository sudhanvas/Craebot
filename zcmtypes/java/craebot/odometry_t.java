/* ZCM type definition class file
 * This file was automatically generated by zcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package craebot;
 
import java.io.*;
import java.util.*;
import zcm.zcm.*;
 
public final class odometry_t implements zcm.zcm.ZCMEncodable
{
    public long utime;
    public float pose[];
    public float velocity[];
    public float pose_covariance[];
    public float velocity_covariance[];
 
    public odometry_t()
    {
        pose = new float[3];
        velocity = new float[3];
        pose_covariance = new float[9];
        velocity_covariance = new float[9];
    }
 
    public static final long ZCM_FINGERPRINT;
    public static final long ZCM_FINGERPRINT_BASE = 0xbc3825fa8b2f5236L;
 
    static {
        ZCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(craebot.odometry_t.class))
            return 0L;
 
        classes.add(craebot.odometry_t.class);
        long hash = ZCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(ZCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        for (int a = 0; a < 3; ++a) {
            outs.writeFloat(this.pose[a]); 
        }
 
        for (int a = 0; a < 3; ++a) {
            outs.writeFloat(this.velocity[a]); 
        }
 
        for (int a = 0; a < 9; ++a) {
            outs.writeFloat(this.pose_covariance[a]); 
        }
 
        for (int a = 0; a < 9; ++a) {
            outs.writeFloat(this.velocity_covariance[a]); 
        }
 
    }
 
    public odometry_t(byte[] data) throws IOException
    {
        this(new ZCMDataInputStream(data));
    }
 
    public odometry_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != ZCM_FINGERPRINT)
            throw new IOException("ZCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static craebot.odometry_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        craebot.odometry_t o = new craebot.odometry_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.pose = new float[(int) 3];
        for (int a = 0; a < 3; ++a) {
            this.pose[a] = ins.readFloat();
        }
 
        this.velocity = new float[(int) 3];
        for (int a = 0; a < 3; ++a) {
            this.velocity[a] = ins.readFloat();
        }
 
        this.pose_covariance = new float[(int) 9];
        for (int a = 0; a < 9; ++a) {
            this.pose_covariance[a] = ins.readFloat();
        }
 
        this.velocity_covariance = new float[(int) 9];
        for (int a = 0; a < 9; ++a) {
            this.velocity_covariance[a] = ins.readFloat();
        }
 
    }
 
    public craebot.odometry_t copy()
    {
        craebot.odometry_t outobj = new craebot.odometry_t();
        outobj.utime = this.utime;
 
        outobj.pose = new float[(int) 3];
        System.arraycopy(this.pose, 0, outobj.pose, 0, 3); 
        outobj.velocity = new float[(int) 3];
        System.arraycopy(this.velocity, 0, outobj.velocity, 0, 3); 
        outobj.pose_covariance = new float[(int) 9];
        System.arraycopy(this.pose_covariance, 0, outobj.pose_covariance, 0, 9); 
        outobj.velocity_covariance = new float[(int) 9];
        System.arraycopy(this.velocity_covariance, 0, outobj.velocity_covariance, 0, 9); 
        return outobj;
    }
 
}

