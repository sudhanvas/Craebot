/* ZCM type definition class file
 * This file was automatically generated by zcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package craebot;
 
import java.io.*;
import java.util.*;
import zcm.zcm.*;
 
public final class joystick_t implements zcm.zcm.ZCMEncodable
{
    public long utime;
    public byte nButtons;
    public byte nAxes;
    public boolean buttons[];
    public float axes[];
 
    public joystick_t()
    {
    }
 
    public static final long ZCM_FINGERPRINT;
    public static final long ZCM_FINGERPRINT_BASE = 0x2b109b683b9a08ccL;
 
    static {
        ZCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(craebot.joystick_t.class))
            return 0L;
 
        classes.add(craebot.joystick_t.class);
        long hash = ZCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(ZCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeByte(this.nButtons); 
 
        outs.writeByte(this.nAxes); 
 
        for (int a = 0; a < this.nButtons; ++a) {
            outs.writeByte( this.buttons[a] ? 1 : 0); 
        }
 
        for (int a = 0; a < this.nAxes; ++a) {
            outs.writeFloat(this.axes[a]); 
        }
 
    }
 
    public joystick_t(byte[] data) throws IOException
    {
        this(new ZCMDataInputStream(data));
    }
 
    public joystick_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != ZCM_FINGERPRINT)
            throw new IOException("ZCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static craebot.joystick_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        craebot.joystick_t o = new craebot.joystick_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.nButtons = ins.readByte();
 
        this.nAxes = ins.readByte();
 
        this.buttons = new boolean[(int) nButtons];
        for (int a = 0; a < this.nButtons; ++a) {
            this.buttons[a] = ins.readByte()!=0;
        }
 
        this.axes = new float[(int) nAxes];
        for (int a = 0; a < this.nAxes; ++a) {
            this.axes[a] = ins.readFloat();
        }
 
    }
 
    public craebot.joystick_t copy()
    {
        craebot.joystick_t outobj = new craebot.joystick_t();
        outobj.utime = this.utime;
 
        outobj.nButtons = this.nButtons;
 
        outobj.nAxes = this.nAxes;
 
        outobj.buttons = new boolean[(int) nButtons];
        if (this.nButtons > 0)
            System.arraycopy(this.buttons, 0, outobj.buttons, 0, this.nButtons); 
        outobj.axes = new float[(int) nAxes];
        if (this.nAxes > 0)
            System.arraycopy(this.axes, 0, outobj.axes, 0, this.nAxes); 
        return outobj;
    }
 
}

